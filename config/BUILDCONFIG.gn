# Copyright 2016 Google Inc.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# guide user to choose compiler/target/...
declare_args() {
  # 1. |toolchain|
  is_msvc = false # if false, goto |2|, else goto |3|

  # 2. if |1| is true
  # cc = "cl.exe"
  # cxx = "cl.exe"
  # ld = "link.exe"
  # ar = "lib.exe"
  # msvc only work when |win-win|, |is_win| is always true, so |win_sdk| and |win_vc| are needed
  # TODO what about the |uwp|
  win_sdk = "C:/Program Files (x86)/Windows Kits/10"
  win_sdk_version = ""
  win_vc = ""
  win_vc_ver = ""
  win_toolchain_version = ""

  # 3. if |1| is false, use |gcc_like_toolchain|
  # cc = "cc"
  # cxx = "c++"
  # ld = "ld"
  # ar = "ar"
  prefix = "" # for example, |aarch64-linux-gnu-| for arm64, |arm-none-eabi-| for stm32, ...
  is_clang = false # some configs only works with |clang|
  # goto |4|

  # 4. |target_os|
  is_win = false
  is_posix = true
  # TODO support |mac|/|ios|/|android|/...
  # is_mac = false # need |framework| ?
  # is_ios = false # need |sdk| ? seems same as mac ?
  # is_android = false # need |ndk|, the stm32 seems the same, just need lib and lds(-Txxx)
  # TODO can we extract the |sdk| in |win|/|android|/... to same variable
  # eg. path/version/...

  # 5. |target_cpu|
  is_x86 = true # the x86/x64
  is_arm = false # the arm/arm64, TODO what about |armv7|
  # TODO support |mips|/|sparc|/|tile|/|loongson|/...
}

declare_args() {
  is_debug = false
  sanitize = ""
}

# Platform detection
if (target_os == "") {
  target_os = host_os
}
if (target_cpu == "") {
  target_cpu = host_cpu
}
if (target_cpu == "x86_64") {
  target_cpu = "x64"
}

is_posix = target_os == "linux"
is_mac = target_os == "mac"
is_win = target_os == "win"
# is_android = target_os == "android"
# is_ios = target_os == "ios" || target_os == "tvos"

# *********************************************************************************
# Config msvc builder
# 配置MSVC编译，首先会尝试从系统中自动寻找vc编译器，没有匹配到结果时，再从缺省硬编码配置路径中读取
# *********************************************************************************
if (target_os == "win") {
  # By default we look for 2017 (Pro & Community), then 2015. If MSVC is installed in a
  # non-default location, you can set win_vc to inform us where it is.
  vc_2017_pro_default =
      "C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/VC"
  vc_2017_com_default =
      "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC"
  vc_2017_bt_default =
      "C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC"
  vc_2015_default = "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC"
  vc_2013_default = "C:/Program Files (x86)/Microsoft Visual Studio 12.0/VC"

  if (win_vc == "") {
    if ("True" == exec_script("//gn/toolchain/msvc/check_vcdir.py",
                              [ "$vc_2017_pro_default" ],
                              "trim string")) {
      win_vc = vc_2017_pro_default
      win_vc_ver = 2017
    } else if ("True" == exec_script("//gn/toolchain/msvc/check_vcdir.py",
                                     [ "$vc_2017_com_default" ],
                                     "trim string")) {
      win_vc = vc_2017_com_default
      win_vc_ver = 2017
    } else if ("True" == exec_script("//gn/toolchain/msvc/check_vcdir.py",
                                     [ "$vc_2017_bt_default" ],
                                     "trim string")) {
      win_vc = vc_2017_bt_default
      win_vc_ver = 2017
    } else if ("True" == exec_script("//gn/toolchain/msvc/check_vcdir.py",
                                     [ "$vc_2015_default" ],
                                     "trim string")) {
      win_vc = vc_2015_default
      win_vc_ver = 2015
    } else if ("True" == exec_script("//gn/toolchain/msvc/check_vcdir.py",
                                     [ "$vc_2013_default" ],
                                     "trim string")) {
      win_vc = vc_2013_default
      win_vc_ver = 2013
    }
  }
  assert(win_vc != "")  # Could not find VC installation. Set win_vc to your VC directory.
  
  if (win_vc_ver == "") {
    if ("True" == exec_script("//gn/toolchain/msvc/check_vcdir.py", [ "$win_vc/Tools" ], "trim string")) {
      win_vc_ver = 2017
    } else {
      win_vc_ver = 2015
    }
  }
}

if (target_os == "win") {
  if (win_vc_ver == 2017 && win_toolchain_version == "") {
    win_toolchain_version = exec_script("//gn/toolchain/highest_version_vcdir.py",
                                        [
                                          "$win_vc/Tools/MSVC",
                                          "[0-9]{2}\.[0-9]{2}\.[0-9]{5}",
                                        ],
                                        "trim string")
  }
  if (win_sdk_version == "") {
    win_sdk_version = exec_script("//gn/toolchain/highest_version_vcdir.py",
                                  [
                                    "$win_sdk/Include",
                                    "[0-9]{2}\.[0-9]\.[0-9]{5}\.[0-9]",
                                  ],
                                  "trim string")
  }
}

# Default configs
default_configs = [
  "//gn/config:default",
  "//gn/config:warnings",
  "//gn/config:no_exceptions",
  "//gn/config:no_rtti",
]
if (!is_debug) {
  default_configs += [ "//gn/config:release" ]
} else {
  default_configs += [ "//gn/config:debug_symbols" ]
}
default_configs += [ "//gn/config:extra_flags" ]

set_defaults("executable") {
  configs = [ "//gn/config:executable" ] + default_configs
}

set_defaults("source_set") {
  configs = default_configs
}

set_defaults("static_library") {
  configs = default_configs
}

set_defaults("shared_library") {
  configs = default_configs
}

if (is_win) {
  # Windows tool chain
  set_default_toolchain("//gn/toolchain/msvc:msvc")
  default_toolchain_name = "msvc"
  # host_toolchain = "msvc"
} else {
  # GCC-like toolchains, including Clang.
  set_default_toolchain("//gn/toolchain/gcc:gcc_target")
  default_toolchain_name = "gcc_target"
  # host_toolchain = "gcc_host"
}
