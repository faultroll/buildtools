
import("//gn/toolchain/cc_wrapper.gni")

declare_args() {
  win_xp = false
}

toolchain("msvc") {
  lib_dir_switch = "/LIBPATH:"

  # if (msvc == 2017) {
  #   bin = "$win_vc/Tools/MSVC/$win_toolchain_version/bin/HostX64/$target_cpu"
  # } else {
  #   if (target_cpu == "x86") {
  #     bin = "$win_vc/bin"
  #   } else {
  #     bin = "$win_vc/bin/amd64"
  #   }
  # }

  env_setup = ""
  if (target_cpu == "x86") {
    # Toolchain asset includes a script that configures for x86 building.
    # We don't support x86 builds with local MSVC installations.
    # env_setup = "cmd /c $win_sdk/bin/SetEnv.cmd /x86 && "
    
    env_setup = "\"$win_vc/vcvarsall.bat\" &&"
  }

  tool("asm") {
    _ml = "ml"
    if (target_cpu == "x64") {
      _ml += "64"
    }
    _ml += ".exe"

    command = "cmd /c \"$env_setup $_ml {{asmflags}} /nologo /c /Fo {{output}} {{source}}\""
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
    ]
    description = "assemble {{source}}"
  }

  tool("cc") {
    rspfile = "{{output}}.rsp"
    cl = "cl.exe"
    precompiled_header_type = "msvc"
    pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"

    # Label names may have spaces so pdbname must be quoted.
    command = "cmd /c \"$env_setup $cc_wrapper $cl /FS /nologo /showIncludes /FC @$rspfile /c {{source}} /Fo{{output}} /Fd\"$pdbname\"\""
    if (win_xp) {
        command += " /D_USING_V110_SDK71_"
    }
    depsformat = "msvc"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
    ]
    rspfile_content =
        "{{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}"
    description = "compile {{source}}"
  }

  tool("cxx") {
    rspfile = "{{output}}.rsp"
    cl = "cl.exe"
    precompiled_header_type = "msvc"
    pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"

    # Label names may have spaces so pdbname must be quoted.
    command = "cmd /c \"$env_setup $cc_wrapper $cl /FS /nologo /showIncludes /FC @$rspfile /c {{source}} /Fo{{output}} /Fd\"$pdbname\"\""
    if (win_xp) {
        command += " /D_USING_V110_SDK71_"
    }
    depsformat = "msvc"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
    ]
    rspfile_content =
        "{{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}"
    description = "compile {{source}}"
  }

  tool("alink") {
    rspfile = "{{output}}.rsp"
    lib = "lib.exe"

    command = "cmd /c \"$env_setup $lib /nologo /ignore:4221 {{arflags}} /OUT:{{output}} @$rspfile\""
    if (win_xp) {
        command += " /SUBSYSTEM:WINDOWS,5.01"
    }
    outputs = [
      # Ignore {{output_extension}} and always use .lib, there's no reason to
      # allow targets to override this extension on Windows.
      "{{root_out_dir}}/{{target_output_name}}{{output_extension}}",
    ]
    default_output_extension = ".lib"
    default_output_dir = "{{target_out_dir}}"

    # inputs_newline works around a fixed per-line buffer size in the linker.
    rspfile_content = "{{inputs_newline}}"
    description = "link {{output}}"
  }

  tool("solink") {
    dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    libname = "${dllname}.lib"
    pdbname = "{{output_dir}}/{{target_output_name}}.pdb"
    rspfile = "${dllname}.rsp"
    lnk = "link.exe"

    command = "cmd /c \"$env_setup $lnk /nologo /IMPLIB:$libname /DLL /OUT:$dllname /PDB:$pdbname @$rspfile\""
    if (win_xp) {
        command += " /SUBSYSTEM:WINDOWS,5.01"
    }
    outputs = [
      dllname,
      libname,
      pdbname,
    ]
    default_output_extension = ".dll"
    default_output_dir = "{{root_out_dir}}"

    link_output = libname
    depend_output = libname
    runtime_outputs = [
      dllname,
      pdbname,
    ]

    # I don't quite understand this.  Aping Chrome's toolchain/win/BUILD.gn.
    restat = true

    # inputs_newline works around a fixed per-line buffer size in the linker.
    rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}}"
    description = "link {{output}}"
  }

  tool("link") {
    exename = "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"
    pdbname = "$exename.pdb"
    rspfile = "$exename.rsp"
    lnk = "link.exe"

    command = "cmd /c \"$env_setup $lnk /nologo /OUT:$exename /PDB:$pdbname @$rspfile\""
    if (win_xp) {
        command += " /SUBSYSTEM:WINDOWS,5.01"
    }

    default_output_extension = ".exe"
    default_output_dir = "{{root_out_dir}}"
    outputs = [
      exename,
    ]

    # inputs_newline works around a fixed per-line buffer size in the linker.
    rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}}"
    description = "link {{output}}"
  }

  tool("stamp") {
    stamp = "cmd.exe /c echo >"

    command = "$stamp {{output}}"
    description = "stamp {{output}}"
  }

  tool("copy") {
    cp_py = rebase_path("//gn/toolchain/shutil_cp.py")
    command = "python $cp_py {{source}} {{output}}"
    description = "copy {{source}} {{output}}"
  }
}
